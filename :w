



//const RGB darkOrange = {.r = 239, .g = 144, .b = 7};
//const HSV darkOrange = {.h = 35, .s = 97.1, .v = 93.7};
//const RGB lightOrange = {.r = 246, .g = 211, .b = 23};
//const HSV lightOrange = {.h = 51, .s = 90.7, .v = 96.5};
//const RGB white = {.r = 255, .g = 255, .b = 255};
//const HSV white = {.h = 51, .s = 0, .v = 100};
//const RGB lightBlue = {.r = 69, .g = 188, .b = 238};
//const HSV lightBlue = {.h = 198, .s = 71, .v = 93.3};
//const RGB darkBlue = {.r = 30, .g = 63, .b = 83};
//const HSV darkBlue = {.h = 203, .s = 63.9, .v = 32.5};
//RGB aroaceFlag[5] = {darkOrange, lightOrange, white, lightBlue, darkBlue};


//HSV aroaceFlag[5] = {darkOrange, lightOrange, white, lightBlue, darkBlue};
#define DARKORANGE 0xef9007
#define LIGHTORANGE 0xf6d317
#define WHITE 0xffffff
#define lightBlue 0x45bcee
#define darkBlue 0x1e3f54

RGB_MATRIX_EFFECT(aro_ace_splash)

#ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
    #ifdef ENABLE_RGB_MATRIX_SOLID_REACTIVE_SPLASH
        // ## default customizable values ##
        #ifndef SOLID_REACTIVE_SPLASH_WAVE_RGB
            #define SOLID_REACTIVE_SPLASH_WAVE_RGB 0x3c1f9c  // purple-ish
        #endif

        #ifndef SOLID_REACTIVE_SPLASH_WAVE_WIDTH
            #define SOLID_REACTIVE_SPLASH_WAVE_WIDTH 75  // ~8 keys wide (including fade/dropoff)
        #endif
        // ## default customizable values ##

        #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS

            #define _MAX(a, b) ((a) > (b) ? (a) : (b))
            #define _MIN(a, b) ((a) < (b) ? (a) : (b))
            #define _CLAMP(v, min, max) (_MIN(_MAX(v, min), max))

            #define _RGBHEX_R(rgb) ((rgb) >> 16)
            #define _RGBHEX_G(rgb) (((rgb) >> 8) & 0xFF)
            #define _RGBHEX_B(rgb) ((rgb) & 0xFF)

            bool aro_ace_splash(effect_params_t* params) {

                int index = rand()%6;
                RGB_MATRIX_USE_LIMITS(led_min, led_max);

                RGB base_rgb = rgb_matrix_hsv_to_rgb(rgb_matrix_config.hsv);
                RGB wave_rgb = {};
                if(index == 0){
                    wave_rgb = {.r = _RGBHEX_R(DARKORANGE),.g = _RGBHEX_G(DARKORANGE),.b = _RGBHEX_B(DARKORANGE)};
                }
                else{
                    wave_rgb = {
                        .r = _RGBHEX_R(DARKORANGE),
                        .g = _RGBHEX_G(DARKORANGE),
                        .b = _RGBHEX_B(DARKORANGE)
                    };
                }



                for (uint8_t i = led_min; i < led_max; i++) {
                    RGB_MATRIX_TEST_LED_FLAGS();
                    uint8_t A          = 0;
                    uint8_t hit_count  = g_last_hit_tracker.count;
                    uint8_t wave_speed = rgb_matrix_config.speed;

                    /* result = (A * wave_color) + ((1 - A) * base_color) */
                    for (uint8_t j = 0; j < hit_count; j++) {
                        uint16_t tick             = g_last_hit_tracker.tick[j];
                        uint16_t wave_travel_dist = scale16by8(tick, qadd8(wave_speed, 1));  // a * (b/255)
                        uint16_t dx               = g_led_config.point[i].x - g_last_hit_tracker.x[j];
                        uint16_t dy               = g_led_config.point[i].y - g_last_hit_tracker.y[j];
                        uint8_t  key_dist         = sqrt16(dx * dx + dy * dy);
                        uint16_t offset           = wave_travel_dist - key_dist;

                        bool before_wave = offset > SOLID_REACTIVE_SPLASH_WAVE_WIDTH;
                        bool after_wave = wave_travel_dist < key_dist;
                        bool inside_wave = !before_wave && !after_wave;

                        if (inside_wave) {
                            A = qadd8(A, qsub8(
                                0xFF, _CLAMP(
                                    255 * offset / SOLID_REACTIVE_SPLASH_WAVE_WIDTH,
                                    0, 0xFF
                                )
                            ));
                        }
                    }

                    RGB rgb = {
                        .r = scale8(wave_rgb.r, A) + scale8(base_rgb.r, 0xFF - A),
                        .g = scale8(wave_rgb.g, A) + scale8(base_rgb.g, 0xFF - A),
                        .b = scale8(wave_rgb.b, A) + scale8(base_rgb.b, 0xFF - A),
                    };
                    rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
                }

                return rgb_matrix_check_finished_leds(led_max);
            }
        #endif
    #endif
#endif


/*
typedef HSV (*reactive_splash_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick);

bool runner(uint8_t start, effect_params_t* params, reactive_splash_f effect_func) {
    RGB_MATRIX_USE_LIMITS(led_min, led_max);

    uint8_t count = g_last_hit_tracker.count;
    for (uint8_t i = led_min; i < led_max; i++) {
        RGB_MATRIX_TEST_LED_FLAGS();
        HSV hsv = rgb_matrix_config.hsv;
        hsv.v   = 0;
        for (uint8_t j = start; j < count; j++) {
            int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
            int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
            uint8_t  dist = sqrt16(dx * dx + dy * dy);
            uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], qadd8(rgb_matrix_config.speed, 1));
            hsv           = effect_func(hsv, dx, dy, dist, tick);
        }
        hsv.v   = scale8(hsv.v, rgb_matrix_config.hsv.v);
        RGB rgb = rgb_matrix_hsv_to_rgb(hsv);
        rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
    }
    return rgb_matrix_check_finished_leds(led_max);
}
uint16_t constant = 5;
HSV aro_ace_splash_math(HSV color, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
    uint16_t effect = tick - dist;

    if (effect > (constant*4)){
        return(aroaceFlag[4]);
    }
    else if((effect >= 0) && (effect < constant)){
        return(aroaceFlag[0]);
    }
    else if((effect > constant) && (effect < (constant*2))){
        return(aroaceFlag[1]);
    }
    else if((effect >= (constant*2)) && (effect < (constant*3))){
        return(aroaceFlag[2]);
    }
    else if((effect >= (constant*3)) && (effect < (constant*4))){
        return(aroaceFlag[3]);
    }
    HSV blank = {.h = 0, .s = 100, .v = 100};
    return(blank);
}


bool aro_ace_splash(effect_params_t* params) {
    return runner(0, params, &aro_ace_splash_math);
}

#endif
uint8_t aro_ace_splash_math(uint8_t val, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
    uint16_t effect = tick - dist;
    if (effect > 255) effect = 255;
    return qadd8(val, 255 - effect);
}



bool runner(uint8_t start, effect_params_t* params, reactive_splash_f effect_func) {
    RGB_MATRIX_USE_LIMITS(led_min, led_max);

    uint8_t count = g_last_hit_tracker.count;
    for (uint8_t i = led_min; i < led_max; i++) {
        RGB_MATRIX_TEST_LED_FLAGS();
        uint8_t val = 0;
        for (uint8_t j = start; j < count; j++) {
            int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
            int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
            uint8_t  dist = sqrt16(dx * dx + dy * dy);
            uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
            val           = effect_func(val, dx, dy, dist, tick);
        }
        rgb_matrix_set_color(i, aroaceFlag[(scale8(val, rgb_matrix_config.val))/51]);
    }
    return rgb_matrix_check_finished_leds(led_max);
}

bool aro_ace_splash(effect_params_t* params) {
    return runner(0, params, &aro_ace_splash_math);
}
#            endif
*/





/*
#if defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && defined(ENABLE_RGB_MATRIX_TYPING_HEATMAP)
RGB_MATRIX_EFFECT(TYPING_HEATMAP)
#    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
#        ifndef RGB_MATRIX_TYPING_HEATMAP_INCREASE_STEP
#            define RGB_MATRIX_TYPING_HEATMAP_INCREASE_STEP 32
#        endif

#        ifndef RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS
#            define RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS 25
#        endif

#        ifndef RGB_MATRIX_TYPING_HEATMAP_SPREAD
#            define RGB_MATRIX_TYPING_HEATMAP_SPREAD 40
#        endif

#        ifndef RGB_MATRIX_TYPING_HEATMAP_AREA_LIMIT
#            define RGB_MATRIX_TYPING_HEATMAP_AREA_LIMIT 16
#        endif

const RGB ledsOff = {.r = 0, .g = 0, .b = 0};

const RGB darkOrange = {.r = 239, .g = 144, .b = 7};
const RGB lightOrange = {.r = 246, .g = 211, .b = 23};
const RGB white = {.r = 255, .g = 255, .b = 255};
const RGB lightBlue = {.r = 69, .g = 188, .b = 238};
const RGB darkBlue = {.r = 30, .g = 63, .b = 83};
RGB aroaceFlag[5] = {darkOrange, lightOrange, white, lightBlue, darkBlue};

int compareRGB(RGB color1, RGB color2){
    if(color1.r == color2.r){
        if(color1.g == color2.g){
            if(color1.b == color2.b){
                return(1);
            }
        }
    }
    return(0);
}


RGB get_rgb_color(int index, int max, int min){
    //RGB_MATRIX_USE_LIMITS(led_min, led_max);
    RGB color;
    ws2812_led led;
    if((index >= min) && (index < max)){
        memcpy_P(&led, (&g_ckled2001_leds[index]), sizeof(led));
        color.r = g_pwm_buffer[led.driver][led.r];
        color.g = g_pwm_buffer[led.driver][led.g];
        color.b = g_pwm_buffer[led.driver][led.b];
    }
    return(color);

}

RGB getNextColor(RGB color){
    int size = sizeof(aroaceFlag)/sizeof(aroaceFlag[0]);
    val = rand() % 6;
    return(aroaceFlag[val]);
    for(int i = 0; i < size; i++){
        if(compareRGB(color, aroaceFlag[i])){
            if(i == (size - 1)){
                return(aroaceFlag[i]);
            }
            else{
                return(aroaceFlag[i+1]);
            }
        }
    }
}

RGB getPreviousColor(RGB color){
    int size = sizeof(aroaceFlag)/sizeof(aroaceFlag[0]);
    for(int i = 0; i < size; i++){
        if(compareRGB(color, aroaceFlag[i])){
            if(i == 0){
                return(ledsOff);
            }
            else{
                return(aroaceFlag[i-1]);
            }
        }
    }
}

//get index of color passed
int getIndex(RGB value){
    switch(value){
        case aroaceFlag[0]:
            return(0);
            break;
        case aroaceFlag[1]:
            return(1);
            break;
        case aroaceFlag[2]:
            return(2);
            break;
        case aroaceFlag[3]:
            return(3);
            break;
        default:
            return(4);
            break;

}

void process_rgb_matrix_typing_heatmap(uint8_t row, uint8_t col) {
#        ifdef RGB_MATRIX_TYPING_HEATMAP_SLIM
    // Limit effect to pressed keys
    g_rgb_frame_buffer[row][col] = qadd8(g_rgb_frame_buffer[row][col], RGB_MATRIX_TYPING_HEATMAP_INCREASE_STEP);
#        else
    if (g_led_config.matrix_co[row][col] == NO_LED) { // skip as pressed key doesn't have an led position
        return;
    }
    for (uint8_t i_row = 0; i_row < MATRIX_ROWS; i_row++) {
        for (uint8_t i_col = 0; i_col < MATRIX_COLS; i_col++) {
            if (g_led_config.matrix_co[i_row][i_col] == NO_LED) { // skip as target key doesn't have an led position
                continue;
            }
            if (i_row == row && i_col == col) {
                g_rgb_frame_buffer[row][col] = qadd8(g_rgb_frame_buffer[row][col], RGB_MATRIX_TYPING_HEATMAP_INCREASE_STEP);
            } else {
#            define LED_DISTANCE(led_a, led_b) sqrt16(((int16_t)(led_a.x - led_b.x) * (int16_t)(led_a.x - led_b.x)) + ((int16_t)(led_a.y - led_b.y) * (int16_t)(led_a.y - led_b.y)))
                uint8_t distance = LED_DISTANCE(g_led_config.point[g_led_config.matrix_co[row][col]], g_led_config.point[g_led_config.matrix_co[i_row][i_col]]);
#            undef LED_DISTANCE
                if (distance <= RGB_MATRIX_TYPING_HEATMAP_SPREAD) {
                    uint8_t amount = qsub8(RGB_MATRIX_TYPING_HEATMAP_SPREAD, distance);
                    if (amount > RGB_MATRIX_TYPING_HEATMAP_AREA_LIMIT) {
                        amount = RGB_MATRIX_TYPING_HEATMAP_AREA_LIMIT;
                    }
                    g_rgb_frame_buffer[i_row][i_col] = qadd8(g_rgb_frame_buffer[i_row][i_col], amount);
                }
            }
        }
    }
#        endif
}

// A timer to track the last time we decremented all heatmap values.
static uint16_t heatmap_decrease_timer;
// Whether we should decrement the heatmap values during the next update.
static bool decrease_heatmap_values;

bool TYPING_HEATMAP(effect_params_t* params) {
    RGB_MATRIX_USE_LIMITS(led_min, led_max);

    if (params->init) {
        rgb_matrix_set_color_all(0, 0, 0);
        memset(g_rgb_frame_buffer, 0, sizeof g_rgb_frame_buffer);
    }

    // The heatmap animation might run in several iterations depending on
    // `RGB_MATRIX_LED_PROCESS_LIMIT`, therefore we only want to update the
    // timer when the animation starts.
    if (params->iter == 0) {
        decrease_heatmap_values = timer_elapsed(heatmap_decrease_timer) >= RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS;

        // Restart the timer if we are going to decrease the heatmap this frame.
        if (decrease_heatmap_values) {
            heatmap_decrease_timer = timer_read();
        }
    }

    // Render heatmap & decrease
    uint8_t count = 0;
    for (uint8_t row = 0; row < MATRIX_ROWS && count < RGB_MATRIX_LED_PROCESS_LIMIT; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS && RGB_MATRIX_LED_PROCESS_LIMIT; col++) {
            if (g_led_config.matrix_co[row][col] >= led_min && g_led_config.matrix_co[row][col] < led_max) {
                count++;
                uint8_t val = g_rgb_frame_buffer[row][col];
                if (!HAS_ANY_FLAGS(g_led_config.flags[g_led_config.matrix_co[row][col]], params->flags)) continue;

                //get index and add one. If greater than 4 then stay at 4`
                HSV hsv = {170 - qsub8(val, 85), rgb_matrix_config.hsv.s, scale8((qadd8(170, val) - 170) * 3, rgb_matrix_config.hsv.v)};
                RGB rgb = rgb_matrix_hsv_to_rgb(hsv);

                count++;
                //RGB currentColor = get_rgb_color(g_led_config.matrix_co[row][col], led_min, led_max);
                //assuming this is the index value for the current pin

                RGB rgb = getNextColor();

                if (decrease_heatmap_values) {
                    //get index and subtract 1. If less than 0 then turn off led
                    RGB rgb = getPreviousColor(currentColor);
                    //g_rgb_frame_buffer[row][col] = qsub8(val, 1);
                }
                rgb_matrix_set_color(g_led_config.matrix_co[row][col], rgb.r, rgb.g, rgb.b);
            }
        }
    }

    return rgb_matrix_check_finished_leds(led_max);
}

#    endif // RGB_MATRIX_CUSTOM_EFFECT_IMPLS
#endif     // defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && defined(ENABLE_RGB_MATRIX_TYPING_HEATMAP)
*/
